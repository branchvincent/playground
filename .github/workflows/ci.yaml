name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  POETRY_VIRTUALENVS_IN_PROJECT: true

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Semantic Releaser
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          git-user-name: "GitHub Actions"
          git-user-email: "action@github.com"
          version-file: pyproject.toml
          version-path: tool.poetry.version
          # skip-on-empty: false
          output-file: false

      - run: |
          cat pyproject.toml
          git status
          git tag

      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
      # - name: Determine new version
      #   id: version
      #   uses: mathieudutour/github-tag-action@v4.5
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     dry_run: true
      # - name: Create tag
      #   run: |
      #     VERSION="${{ steps.version.outputs.new_version }}"
      #     pip install poetry
      #     poetry version "$VERSION"
      #     git commit pyproject.toml -m "chore(release): v$VERSION"
      #     git tag -am "chore(release): v$VERSION" "v$VERSION"
      #     git push --follow-tags
      #     echo "::set-env name=SHA::$(git rev-parse HEAD)"
      # - name: Create GitHub release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ steps.version.outputs.new_version }}
      #     release_name: v${{ steps.version.outputs.new_version }}
      #     body: ${{ steps.version.outputs.changelog }}
      #     commitish: ${{ env.SHA }}
